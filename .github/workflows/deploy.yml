on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

name: First Tes

jobs:

  deploy:
    name: Build image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2


    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push docker image to Amazon ECR
      id: build-image
      
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_NGINX: nginx-i
        ECR_PHP: app-data-i
        ECR_MYSQL: mysql-data-i
        IMAGE_TAG: latest
      run: |
        # Build docker images  
        echo "Build docker images"
        docker compose build
        docker images

        # Taging dcoker images before pushing
        docker tag $ECR_NGINX:$IMAGE_TAG $ECR_REGISTRY/$ECR_NGINX:$IMAGE_TAG
        docker tag $ECR_PHP:$IMAGE_TAG $ECR_REGISTRY/$ECR_PHP:$IMAGE_TAG
        docker tag $ECR_MYSQL:$IMAGE_TAG $ECR_REGISTRY/$ECR_MYSQL:$IMAGE_TAG

        echo "Pushing images to ECR..."
        docker push $ECR_REGISTRY/$ECR_NGINX:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_NGINX:$IMAGE_TAG"
        docker push $ECR_REGISTRY/$ECR_PHP:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_PHP:$IMAGE_TAG"
        docker push $ECR_REGISTRY/$ECR_MYSQL:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_MYSQL:$IMAGE_TAG"


